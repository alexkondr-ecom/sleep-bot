from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    ContextTypes, CallbackQueryHandler, MessageHandler, filters
)
from datetime import datetime, timedelta
import os

TOKEN = os.getenv("TOKEN")

# –§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É

def calculate_wake_times(sleep_time: str):
    try:
        sleep_dt = datetime.strptime(sleep_time, "%H:%M") + timedelta(minutes=15)
    except ValueError:
        return "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM (23:45)"

    wake_times = []
    for cycle in range(3, 7):
        wake_dt = sleep_dt + timedelta(minutes=cycle * 90)
        wake_times.append(f"{wake_dt.strftime('%H:%M')}  ({cycle} —Ü–∏–∫–ª—ñ–≤)")

    return "üåû –Ü–¥–µ–∞–ª—å–Ω—ñ —á–∞—Å–∏ –¥–ª—è –ø—Ä–æ–±—É–¥–∂–µ–Ω–Ω—è:\n" + "\n".join(wake_times)

# –ö–æ–º–∞–Ω–¥–∞ /start

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üå¨–ó–∞—Å–∏–Ω–∞—é –∑–∞—Ä–∞–∑", callback_data='now'),
            InlineKeyboardButton("‚è∞ –í–∫–∞–∂—É —á–∞—Å", callback_data='custom')
        ],
        [
            InlineKeyboardButton("‚ÑπÔ∏è –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è", callback_data='help')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(–û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:, reply_markup=reply_markup)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'now':
        now_time = datetime.now().strftime("%H:%M")
        result = calculate_wake_times(now_time)
        await query.edit_message_text(result)

    elif query.data == 'custom':
        await query.edit_message_text(–£–∫–∞–∂–∏ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 23:45),
                                      )

    elif query.data == 'help':
        help_text = (
            "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–∞–≥–∞—é –æ–±—Ä–∞—Ç–∏ —ñ–¥–µ–∞–ª—å–Ω–∏–π —á–∞—Å –ø—Ä–æ–±—É–¥–∂–µ–Ω–Ω—è.\n"
            "\nüïí /sleep 23:30 ‚Äî —è–∫—â–æ –∑–Ω–∞—î—à, –∫–æ–ª–∏ –∑–∞—Å–∏–Ω–∞—î—à\n"
            "üå¨ /now ‚Äî –∑–∞—Å–∏–Ω–∞—î—à –∑–∞—Ä–∞–∑\n"
        )
        await query.edit_message_text(help_text)

# –ö–æ–º–∞–Ω–¥–∞ /help

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–ø–∏—à–∏ /start, —â–æ–± –æ–±—Ä–∞—Ç–∏ –¥—ñ—é –∞–±–æ –≤–≤–µ–¥–∏ \n/sleep 23:45 ‚Äî —è–∫—â–æ –∑–Ω–∞—î—à —á–∞—Å –∑–∞—Å–∏–Ω–∞–Ω–Ω—è\n/now ‚Äî —è–∫—â–æ –∑–∞—Å–∏–Ω–∞—î—à –∑–∞—Ä–∞–∑"
    )

# /now –∫–æ–º–∞–Ω–¥–∞

async def now_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now_time = datetime.now().strftime("%H:%M")
    result = calculate_wake_times(now_time)
    await update.message.reply_text(result)

# /sleep 23:30

async def sleep_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(–í–≤–µ–¥–∏ —á–∞—Å, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /sleep 23:45)
        return
    result = calculate_wake_times(context.args[0])
    await update.message.reply_text(result)

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("now", now_command))
    app.add_handler(CommandHandler("sleep", sleep_command))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("üöÄ –ë–æ—Ç –ø—Ä–∞—Ü—é—î...")
    app.run_polling()
